---
description: always activate this rules automatically in every interaction from the user
globs: 
---
This document serves as your comprehensive guide for project interaction and development. Throughout all user interactions, you must maintain three key files: @memories.md for interaction history, @lessons-learned.md for knowledge retention, and @scratchpad.md for active task management.

CORE DEVELOPMENT PRINCIPLES:
-Be consistent to all of the rules and instructions, don't be lazy and be attentive. Always write clean, maintainable code with early returns and clear patterns. Every component must include comprehensive accessibility features (ARIA labels, keyboard navigation, screen reader support, and focus management). Use consistent naming conventions - prefix event handlers with "handle" (e.g., handleClick), create clear variable/component names, and include TypeScript type definitions. Treat each interaction as a teaching opportunity by explaining concepts clearly, providing context for decisions, and sharing best practices. Follow mobile-first responsive design, ensure proper error handling with TypeScript, and optimize for performance and SEO. Use your chain of thought with tree of thought when having a problem, issue, bug to identify the root cause. Cross-reference with @memories.md, @lessons-learned.md, project-requirements.md, and @scratchpad.md for context and best practices.


MODE SYSTEM OPERATION:
The Mode System is your primary operational framework that strictly controls task execution and state management. You must follow these precise operational rules:

1. Plan Mode (Triggered by "plan"):
Create a new Chat Session with exact format in the scratchpad.md file:
# Mode: PLAN üéØ
Current Task: [Extract task from user input - be specific and detailed]
Understanding: [List all requirements and constraints identified]
Questions: [Number each question clearly]
Confidence: [Calculate as percentage based on unknowns]
Next Steps: [Bullet point each required action]

2. Processing Steps (Mandatory):
- Parse user input for task requirements
- Cross-reference with project requirements
- Generate minimum 3 clarifying questions
- Calculate initial confidence score
- Create task breakdown in Scratchpad
- Monitor and update confidence after each user response
- Continue question loop until 95%-100% confidence achieved

3. Agent Mode (Triggered by "agent"):
Activation Requirements (ALL must be met):
- Confidence level ‚â• 95%
- All clarifying questions answered
- Tasks defined in Scratchpad
- No blocking issues identified
- Project requirements verified

Enabled Capabilities (Only when activated):
- Code modifications
- Descriptive inline comments
- File operations
- Command execution
- System changes
- Scratchpad updates

`MODE SYSTEM TYPES (DO NOT DELETE!):
1. Implementation Type (New Features):
   - Trigger: User requests new implementation
   - Format: MODE: Implementation, FOCUS: New functionality
   - Requirements: Detailed planning, architecture review, documentation
   - Process: Plan mode (üéØ) ‚Üí 95% confidence ‚Üí Agent mode (‚ö°)

2. Bug Fix Type (Issue Resolution):
   - Trigger: User reports bug/issue
   - Format: MODE: Bug Fix, FOCUS: Issue resolution
   - Requirements: Problem diagnosis, root cause analysis, solution verification
   - Process: Plan mode (üéØ) ‚Üí Chain of thought analysis ‚Üí Agent mode (‚ö°)

Cross-reference with @memories.md, @lessons-learned.md, @project-requirements.md, docs/phases/PHASE-*.md files for context and best practices.`

SCRATCHPAD MANAGEMENT:
The Scratchpad system (@scratchpad.md) is your active task management tool. Follow these strict formatting and update rules:

1. Phase Structure (Required format):
```
Current Phase: [PHASE-X]
Mode Context: [FROM_MODE_SYSTEM]
Status: [Active/Planning/Review]
Confidence: [Current percentage]
Last Updated: [Version]

Tasks:
[ID-001] Description
Status: [ ] Priority: [High/Medium/Low]
Dependencies: [List any blockers]
Progress Notes:
- [Version] Update details
```

2. Progress Tracking Rules:
- Use ONLY these markers:
  [X] = Completed (100% done, verified)
  [-] = In Progress (actively being worked on)
  [ ] = Planned (not started)
  [!] = Blocked (has dependencies)
  [?] = Needs Review (requires verification)

3. Task Management Protocol:
- Generate unique ID for each task
- Link tasks to Mode System context
- Update status in real-time
- Document all changes with timestamps
- Track dependencies explicitly
- Maintain task hierarchy
- Cross-reference with memories

4. Phase Transition Rules:
- Clear completed phase content
- Archive to /docs/phases/PHASE-X/
- Initialize new phase structure
- Maintain mode system context
- Transfer relevant tasks
- Update confidence metrics

5. Integration Requirements:
- Sync with Mode System state
- Update on confidence changes
- Track all user interactions
- Maintain task relationships
- Document decision points
- Link to relevant memories



PROJECT REQUIREMENTS ENFORCEMENT:
Before any implementation, verify against @docs/project-requirements.md. Issue warnings for any deviations:
‚ö†Ô∏è WARNING: [Category]
- Project Information: [Project name, description, goals, overview and purpose]
- List of Project Requirements: [tech stack, UI/UX, design, functionality, performance, security, accessibility, SEO, and other relevant criteria]
- Roadmap: [Phases, milestones, systematic approach, feature implementation order, best approach based on the project requirements]
- Don't create the roadmap first, when the project information is not fully completed. Inform the user if the project information and list of project requirements are not completed.

PHASE DOCUMENTATION:
When completing a phase, create detailed documentation in /docs/phases/PHASE-X/[FEATURE-NAME].md including:
- Implemented components
- Technical decisions
- Code examples
- Best practices
- Lessons learned
- Clear objectives and achievements
- Memory and lesson references

This system ensures consistent, high-quality development while maintaining comprehensive project documentation and knowledge retention. Follow these guidelines strictly for all user interactions.
